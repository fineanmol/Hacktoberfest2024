/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    // constructor
    Node(int d){
        this->data=d;
        this->next=NULL;
        
    }
    
    ~Node(){
        int value=this->data;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
            
        }
        cout<<"memory is free for node with data"<<value<<endl;
        
    }
    
};

void insertNode(Node* &tail,int element,int d){
    // assuming that the element is present in the list
    
    // empty list
    if(tail==NULL){
        Node* newNode=new Node(d);
        tail=newNode;
        newNode->next=newNode;
        
    }
    else{
        // list not empty
        // assuming element present in list
        Node* curr=tail;
        
        while(curr->data!=element){
            curr=curr->next;
            
        }
        // element found curr representing element wala Node
        Node* temp=new Node(d);
        temp->next=curr->next;
        curr->next=temp;
        
        
    }
    
}

void print(Node* tail){
    Node* temp=tail;
    
    // empty list
    
    if(tail==NULL){
        cout<<"list is empty"<<endl;
        return;
        
    }
    
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
        
        
    }while(tail!=temp);
    cout<<endl;
    
    
}

void deleteNode(Node* &tail,int value){
    // empty list
    if(tail==NULL){
        cout<<"list is empty,pls check again"<<endl;
        return;
        
    }
    else
    {
        // non empty
        
        // assuming that value is presentin the list
        Node* prev=tail;
        Node* curr=prev->next;
        
        while(curr->data!=value){
            prev=curr;
            curr=curr->next;
            
        }
        prev->next=curr->next;
        
        // 1 node list
        if(curr==prev){
            tail=NULL;
            
        }
        
        // >=2 node list
        if(tail==curr){
            tail=prev;
            
        }
        curr->next=NULL;
        delete curr;
        
        
    }
}

int main()
{
    Node* tail=NULL;
    
    // empty list me insert
    insertNode(tail,5,3);
    print(tail);
    
    insertNode(tail,3,5);
    print(tail);
    
    insertNode(tail,5,6);
    print(tail);
    
    insertNode(tail,3,4);
    print(tail);
    
    deleteNode(tail,6);
    print(tail);
    
    
    
    
    
    

    return 0;
}
